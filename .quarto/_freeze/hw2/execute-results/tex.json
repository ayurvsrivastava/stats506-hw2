{
  "hash": "872a4544800ca18e68498a123b233ba2",
  "result": {
    "markdown": "---\ntitle: \"hw2\"\n---\n\n1. Dice Game\n    a. Game Implementations\n        i. Version 1\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            #' Dice Game V1\n            #' \n            #' @param num_dice number of dice to roll\n            #' @return net profit\n            dice_game_v1 <- function(num_dice){\n                net_profit <- 0\n                for (i in 1:num_dice){\n                    die_roll <- sample(1:6, 1)\n                    if (die_roll %in% c(2,4,6)){\n                    net_profit <- net_profit + 2\n                    } else {\n                    net_profit <- net_profit - 2\n                    }\n                }\n                return(net_profit)\n            }\n            ```\n            :::\n\n        i. Version 2\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            #' Dice Game V2\n            #' \n            #' @param num_dice number of dice to roll\n            #' @return net profit\n            dice_game_v2 <- function(num_dice){\n                die_rolls <- sample(1:6, num_dice, replace = TRUE)\n                net_profit <- sum(ifelse(die_rolls %in% c(2,4,6), 2, -2))\n                return(net_profit)\n            }\n            ```\n            :::\n\n        i. Version 3\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            #' Dice Game V3\n            #' \n            #' @param num_dice number of dice to roll\n            #' @return net profit\n            dice_game_v3 <- function(num_dice) {\n                die_rolls <- sample(1:6, num_dice, replace = TRUE)  # Simulate dice rolls\n                roll_counts <- table(die_rolls)  # Count the occurrences of each roll\n            \n                # Ensure all possible outcomes (1 to 6) have counts, replace missing ones with 0\n                roll_counts <- ifelse(!1:6 %in% names(roll_counts), 0, roll_counts)\n            \n                # Calculate net profit based on the counts using table()\n                net_profit <- (roll_counts[2] + roll_counts[4] + roll_counts[6]) * 2\n                net_profit <- net_profit - (roll_counts[1] + roll_counts[3] + roll_counts[5]) * 2\n            \n                return(net_profit)\n            }\n            ```\n            :::\n\n        i. Version 4 (Implement this game by using one of the “apply” functions.)\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            #' Dice Game V4\n            #' \n            #' @param num_dice number of dice to roll\n            #' @return net profit\n            dice_game_v4 <- function(num_dice) {\n                die_rolls <- sample(1:6, num_dice, replace = TRUE)  # Simulate dice rolls\n            \n                # Define a function to calculate profit/loss for a single roll\n                calculate_profit <- function(roll) {\n                    if (roll %in% c(2, 4, 6)) {\n                    return(2)\n                    } else {\n                    return(-2)\n                    }\n                }\n            \n                # Use sapply to apply the calculate_profit function to each roll\n                profits <- sapply(die_rolls, calculate_profit)\n            \n                # Calculate the total net profit by summing up the profits\n                net_profit <- sum(profits)\n            \n                return(net_profit)\n            }\n            ```\n            :::\n\n    a. Verfiy\n        i. Version 1\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            num_dice <- 3\n            print(dice_game_v1(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 2\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v1(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] -68\n            ```\n            :::\n            :::\n\n        i. Version 2\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            num_dice <- 3\n            print(dice_game_v2(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 6\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v2(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] -92\n            ```\n            :::\n            :::\n\n        i. Version 3\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            num_dice <- 3\n            print(dice_game_v3(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 2\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v3(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 136\n            ```\n            :::\n            :::\n\n        i. Version 4\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            num_dice <- 3\n            print(dice_game_v4(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] -6\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v4(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 104\n            ```\n            :::\n            :::\n\n    a. Same Results\n        i. Version 1\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            set.seed(1234)\n            num_dice <- 3\n            print(dice_game_v1(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 6\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v1(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] -28\n            ```\n            :::\n            :::\n\n        i. Version 2\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            set.seed(1234)\n            num_dice <- 3\n            print(dice_game_v2(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 6\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v2(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] -28\n            ```\n            :::\n            :::\n\n        i. Version 3\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            set.seed(1234)\n            num_dice <- 3\n            print(dice_game_v3(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 6\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v3(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] -28\n            ```\n            :::\n            :::\n\n        i. Version 4\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            set.seed(1234)\n            num_dice <- 3\n            print(dice_game_v4(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] 6\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 3000\n            print(dice_game_v4(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            [1] -28\n            ```\n            :::\n            :::\n\n    a. Benchmark\n        i. Version 1\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            library(microbenchmark)\n            num_dice <- 100\n            microbenchmark(dice_game_v1(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stderr}\n            ```\n            Warning in microbenchmark(dice_game_v1(num_dice)): less accurate nanosecond\n            times to avoid potential integer overflows\n            ```\n            :::\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: microseconds\n                               expr    min       lq     mean  median       uq      max\n             dice_game_v1(num_dice) 310.78 331.7105 374.1607 343.498 357.4995 2850.238\n             neval\n               100\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 10000\n            microbenchmark(dice_game_v1(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: milliseconds\n                               expr      min       lq     mean   median      uq      max\n             dice_game_v1(num_dice) 35.41851 36.52237 38.96493 37.86973 39.8259 60.36012\n             neval\n               100\n            ```\n            :::\n            :::\n\n        i. Version 2\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            library(microbenchmark)\n            num_dice <- 100\n            microbenchmark(dice_game_v2(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: microseconds\n                               expr    min     lq     mean median     uq    max neval\n             dice_game_v2(num_dice) 11.111 12.464 14.81986 12.956 13.776 53.997   100\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 10000\n            microbenchmark(dice_game_v2(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: microseconds\n                               expr     min      lq     mean  median       uq      max\n             dice_game_v2(num_dice) 560.716 584.824 632.3036 595.443 611.4945 3902.995\n             neval\n               100\n            ```\n            :::\n            :::\n\n        i. Version 3\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            library(microbenchmark)\n            num_dice <- 100\n            microbenchmark(dice_game_v3(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: microseconds\n                               expr    min    lq     mean  median      uq     max neval\n             dice_game_v3(num_dice) 40.959 43.46 47.16107 44.8745 48.2775 150.224   100\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 10000\n            microbenchmark(dice_game_v3(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: microseconds\n                               expr     min       lq     mean   median       uq      max\n             dice_game_v3(num_dice) 598.723 640.6455 762.1687 654.1755 670.7395 10405.14\n             neval\n               100\n            ```\n            :::\n            :::\n\n        i. Version 4\n\n            ::: {.cell}\n            \n            ```{.r .cell-code}\n            library(microbenchmark)\n            num_dice <- 100\n            microbenchmark(dice_game_v4(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: microseconds\n                               expr    min lq     mean median     uq     max neval\n             dice_game_v4(num_dice) 79.048 82 89.10243 86.223 92.414 147.477   100\n            ```\n            :::\n            \n            ```{.r .cell-code}\n            num_dice <- 10000\n            microbenchmark(dice_game_v4(num_dice))\n            ```\n            \n            ::: {.cell-output .cell-output-stdout}\n            ```\n            Unit: milliseconds\n                               expr      min       lq     mean  median       uq      max\n             dice_game_v4(num_dice) 7.490372 8.017079 9.106001 8.79821 9.674237 19.95605\n             neval\n               100\n            ```\n            :::\n            :::\n\n    a. Monte Carlo Simulation\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        num_dice <- 10000\n        num_sims <- 10000\n        set.seed(1234)\n        results <- replicate(num_sims, dice_game_v2(num_dice))\n        print(mean(results))\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        [1] 0.3376\n        ```\n        :::\n        :::\n\n        This seems to be a fair game because the average net profit is close to 0 over 10000 simulations of 10000 dice rolls.\n1. Linear Regression\n    a. Renaming - Modified CSV headers in place locally\n    a. Restrict to \"Gasoline\"\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        cars <- read.csv(\"cars.csv\")\n        cars <- cars[cars$Fuel_Type == \"Gasoline\",]\n        cars$Year <- as.factor(cars$Year)\n        ```\n        :::\n\n    a. Fit Linear Regression for \"Highway MPG\"\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        model <- lm(\n            Highway_MPG \n            ~ Horsepower \n            + Torque \n            + Height \n            + Width \n            + Length \n            + Year\n            , data = cars\n        )\n        print(coefficients(model)[2])\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n        Horsepower \n        0.01635563 \n        ```\n        :::\n        :::\n\n        The coeffecient for Horsepower is approximately 0.016. This means that for every 1 unit increase in Horsepower, Highway MPG increases by 0.016.\n        The coeffecient is so low that it is almost negligible. This means that Horsepower has almost no effect on Highway MPG.\n    a. Horsepower and Torque Interaction Plot\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        library(interactions)\n        model <- lm(\n            Highway_MPG \n            ~ Horsepower * Torque \n            + Height \n            + Width \n            + Length \n            + Year\n            , data = cars\n        )\n        interact_plot(model, pred = Horsepower, modx = Torque, data = cars)\n        ```\n        \n        ::: {.cell-output-display}\n        ![](hw2_files/figure-pdf/unnamed-chunk-20-1.pdf){fig-pos='H'}\n        :::\n        :::\n\n        For lower torque values, we see the lowest amount of increase in Highway MPG as Horsepower increases. For higher torque values, we see the largest amount of increase in Highway MPG as Horsepower increases.\n    a. Manually Calculate Coefficients\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        x <- model.matrix(model)\n        x_t <- t(x)\n        y <- cars$Highway_MPG\n        b_hat <- solve(x_t %*% x) %*% x_t %*% y\n        print(b_hat[, 1])\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n              (Intercept)        Horsepower            Torque            Height \n            42.1879478687     -0.0166633227     -0.0860592704      0.0065603903 \n                    Width            Length          Year2010          Year2011 \n            -0.0011694485      0.0017767232     -0.5627857770      0.0725356431 \n                 Year2012 Horsepower:Torque \n             1.1970329986      0.0001123567 \n        ```\n        :::\n        \n        ```{.r .cell-code}\n        print(coefficients(model))\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        ```\n              (Intercept)        Horsepower            Torque            Height \n            42.1879478687     -0.0166633227     -0.0860592704      0.0065603903 \n                    Width            Length          Year2010          Year2011 \n            -0.0011694485      0.0017767232     -0.5627857770      0.0725356431 \n                 Year2012 Horsepower:Torque \n             1.1970329986      0.0001123567 \n        ```\n        :::\n        :::\n\n        The coefficients are the same as the ones calculated by lm\n1. Linear Regression\n    a. Renaming - Modified CSV headers in place locally\n    a. Restrict to \"Gasoline\"\n\n        ::: {.cell}\n        \n        ```{.stata .cell-code}\n        import delimited \"cars.csv\"\n        (encoding automatically selected: ISO-8859-1)\n        (18 vars, 5,076 obs)\n        \n        keep if fuel_type == \"Gasoline\"\n        (485 observations deleted)\n        ```\n        :::\n\n    a. Fit Linear Regression for \"Highway MPG\" (output truncated for display reasons)\n\n        ::: {.cell}\n        \n        ```{.stata .cell-code}\n        gen model_year_numeric = .\n        (4,591 missing values generated)\n        \n        regress highway_mpg horsepower torque height width length i.year\n              Source |       SS           df       MS      Number of obs   =     4,591\n        -------------+----------------------------------   F(8, 4582)      =    413.35\n               Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000\n            Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192\n        -------------+----------------------------------   Adj R-squared   =    0.4182\n               Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024\n        \n        ------------------------------------------------------------------------------\n          highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n        --------------+----------------------------------------------------------------\n           horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082\n               torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236\n               height |   .0099079   .0011267     8.79   0.000      .007699    .0121168\n                width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388\n               length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613\n                      |\n                 year |\n                2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342\n                2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808\n                2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031\n                      |\n                _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093\n        -------------------------------------------------------------------------------\n        ```\n        :::\n\n        Same answer as above. Coeffecient is approximately 0.016. This means that for every 1 unit increase in Horsepower, Highway MPG increases by 0.016.\n    a. Horsepower and Torque Interaction Plot\n\n        ::: {.cell}\n        \n        ```{.stata .cell-code}\n        regress highway_mpg c.horsepower##c.torque height width length i.year\n        \n            Source   |       SS           df       MS      Number of obs   =     4,591\n        -------------+----------------------------------   F(9, 4581)      =    480.07\n               Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000\n            Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854\n        -------------+----------------------------------   Adj R-squared   =    0.4844\n               Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326\n        \n        -------------------------------------------------------------------------------\n          highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]\n        --------------+----------------------------------------------------------------\n           horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686\n               torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928\n                      |\n         c.horsepower#|\n             c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214\n                      |\n               height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573\n                width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011\n               length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075\n                      |\n                 year |\n                2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777\n                2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626\n                2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915\n                      |\n                _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266\n        -------------------------------------------------------------------------------\n        margins, at(torque=(166 267 368)) over(horsepower)\n        marginsplot, xdim(horsepower)\n        ```\n        :::\n\n        ![Stata Interaction Plot](Graph.png)\n        Same answer as above for graph. For lower torque values, we see the lowest amount of increase in Highway MPG as Horsepower increases. For higher torque values, we see the largest amount of increase in Highway MPG as Horsepower increases.\n\n",
    "supporting": [
      "hw2_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}